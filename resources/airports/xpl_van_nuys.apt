
iata VNY
icao KVNY

rwy1 16R
thr_lat 34.218929
thr_lon -118.491249
thr_el 246.1
eor_lat 34.197002
eor_lon -118.489136
eor_el 246.1
td 250			
gs 3.5
true 176.0

rwy2 34L
thr_lat 34.197002
thr_lon -118.489136
thr_el 246.1
eor_lat 34.218929
eor_lon -118.491249
eor_el 246.1
td 250
gs 3.0
true 356.0

# The runways 16L and 34R are a very short. So short, in fact, that the virtual
# GCA (which by default is placed 75.0 m from the centerline in the middle of
# the runway) cannot see any plots near the touchdown points, let alone the MRC
# points. Still, they are there as an example of how to implement more than two 
# runways per airport.

rwy3 16L
thr_lat 34.215103
thr_lon -118.489632
thr_el 246.1
eor_lat 34.208088
eor_lon -118.488976
eor_el 246.1
td 150			
gs 3.5
true 176.0

rwy4 34R
thr_lat 34.208088
thr_lon -118.488976
thr_el 246.1
eor_lat 34.215103
eor_lon -118.489632
eor_el 246.1
td 150
gs 3.0
true 356.0

# Explanation of the entries above:

# iata, icao:
# These are the IATA and ICAO names of the airport. These names can be obtained
# from airport charts.

# An airport must contain at least one runway, and at most six. They must
# be named rwy1, rwy2, .., or rwy6. All entries after an rwy entry are
# data for that specific runway. The value is the "name" of the runway. It is
# actually often the rounded value of the magnetic direction divided by 10, but 
# not always. Obtained from airport charts.

# thr_lat, thr_lon, thr_el:
# These are the coordinates for the threshold of the runway. The threshold
# is the end point of the runway in the direction of the landing aircraft.
# The format is decimal degrees, and the elevation is in meters. In a perfect world,
# these values can be taken directly from an airport chart, but it is safer to
# actually tax your flightsim aircraft to the point and note the values as seen in
# the gca simulator STATUS window instead. (In DCS, even this is not always enough. 
# See the dcs specific entries below.)

# eor_lat, eor_lon, eor_el:
# The eor (end of runway) point is the point where the runway ends, seen from
# the landing aircraft.

# td:
# The value of td is the distance from the threshold to the touchdown point on 
# the runway. The unit is meters. This value differs, but a typical value is 
# in the vicinity of 300 meters.

# gs:
# This is the initial glideslope angle that the PAR simulator will use when this
# runway is selected.
 
# true:
# This is the runway's true heading.

# IF YOU ARE USING DCS (see the dcs_batumi.apt for example):
# dcs_thr_x/y/z and dcs_eor_x/y/z:
# It seems that using the approach with the lon-lat coordinats for placing the thr 
# and eor points is not good enough in the case with DCS. The precision of the local
# coordinates given by the DCS coordinate conversion functions just isn't good enough, 
# resulting in a skewed approach in the simulation. My solution is to use the DCS's local 
# coordinates directly, instead of obtaining them through passsing the lon-lat coordinates
# of the thr and eor to the API functions. This is by no means an elegant approach, as we
# cannot know when DCS decides to, for example, reposition origo of the local coordinate
# system. If we are unlucky, this happens near our current airport, with potentially 
# disastrous results. It is however the only approach I can think of that does the trick. 
# To obtain the local coordinates, you have to create a mission in which there is only one 
# aircraft present. The local and global coordinate of that plane will then be presented 
# in the STATUS window in the gca simulator. Then tax your plane to the points of interest, 
# and make a note of the coordinate.
# These dcs-entries are optional, but if they exist and DCS is the data source, they will 
# override the lon-lat coordinates entered earlier.
# In DCS, try creating a mission in which an aircraft lands. The aircraft will, after it 
# has extracted its landing gear, be on a perfect approach sidewise. If it isn't, go for 
# the dcs_thr_x/y/z and dcs_eor_x/y/z approach instead of the lon-lat one. 
